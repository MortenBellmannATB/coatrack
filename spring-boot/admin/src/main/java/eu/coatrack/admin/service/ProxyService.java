package eu.coatrack.admin.service;

import eu.coatrack.admin.logic.CreateProxyAction;
import eu.coatrack.admin.model.repository.ProxyRepository;
import eu.coatrack.api.Proxy;
import eu.coatrack.api.ServiceApi;
import eu.coatrack.api.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Slf4j
@Service
public class ProxyService {
    @Autowired
    private ProxyRepository proxyRepository;


    @Autowired
    private CreateProxyAction createProxyAction;

    public List<String> customSearchForAllProxiesForGivenServiceApiId(long id) {
        return proxyRepository.customSearchForAllProxiesForGivenServiceApiId(id)
                .stream().map(Proxy::getPublicUrl).filter(Objects::nonNull)
                .filter(publicUrl -> !publicUrl.isEmpty()).collect(Collectors.toList());
    }

    public void updateNotificationStatusOnGatewayHealthMonitor(String proxyId, boolean isMonitoringEnabled) {
        Proxy proxy = proxyRepository.findById(proxyId).orElse(null);
        if(proxy != null) {
            proxy.setHealthMonitoringEnabled(isMonitoringEnabled);
            log.debug("Changing the monitoring status of proxy {} to {}", proxy.getName(), proxy.isHealthMonitoringEnabled());
            proxyRepository.save(proxy);
        } else {
            log.debug("Requested proxy could not be found! Please check your data!");
        }
    }

    public Proxy create(User authenticatedUser, ServiceApi service, int proxyServerDefaultPort) {
        Proxy proxy = new Proxy();
        proxy.setPort(proxyServerDefaultPort);
        proxy.setName("Gateway for " + service.getName());
        proxy.setOwner(authenticatedUser);
        proxy.setDescription("Gateway generated by the getting started wizard");

        createProxyAction.setProxy(proxy);
        createProxyAction.setUser(authenticatedUser);
        createProxyAction.setSelectedServices(Collections.singletonList(service.getId()));
        createProxyAction.execute();
        return createProxyAction.getProxy();
    }


}
